PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX twa:<https://theworldavatar.io/kg/form/>

CONSTRUCT {
  ?iri rdf:type sh:PropertyShape ;
    sh:name ?name ;
    sh:description ?description ;
    sh:order ?order;
    sh:datatype ?type ;
    sh:in ?range ;
    sh:class ?dataclass ;
    sh:defaultValue ?defaultValue ;
    twa:belongsTo ?nodegroup ;
    twa:dependentOn ?dependentShape ;
    twa:role ?role ;
    sh:group ?groupobj ;
    sh:minCount ?mincount ;
    sh:maxCount ?maxcount ;
    sh:minInclusive ?mininclusive ;
    sh:maxInclusive ?maxinclusive ;
    sh:minExclusive ?minexclusive ;
    sh:maxExclusive ?maxexclusive ;
    sh:minLength ?minlength ;
    sh:maxLength ?maxlength ;
    twa:step ?step ;
    sh:pattern ?pattern .
  ?groupobj rdf:type sh:PropertyGroup ;
    rdfs:label ?group ;
    rdfs:comment ?groupdesc ;
    twa:role ?grouprole ;
	sh:order ?grouporder;
    sh:minCount ?mingroupcount ;
    sh:maxCount ?maxgroupcount .
  ?nodegroup rdf:type sh:NodeShape ;
    rdfs:label ?nodename ;
    rdfs:comment ?nodedesc .
} WHERE {
  ?shape rdf:type sh:NodeShape ;
    sh:targetClass [target] ;
    (sh:and|sh:or/rdf:rest*/rdf:first)? ?node.
  OPTIONAL{
    ?node sh:name ?nodename ;
    	sh:description ?nodedesc.
    BIND(IF(BOUND(?nodename),?node,?null) AS ?nodegroup)
  }
  OPTIONAL{
    ?node (sh:and/rdf:rest*/rdf:first)?/sh:property ?property .
    ?property sh:name ?propname ;
      sh:description ?propdesc ;
      (sh:node/sh:and?/sh:property)* ?subproperty .
    ?subproperty sh:name ?name ;
      sh:description ?description .
    BIND(IF(BOUND(?nodename),BNODE(CONCAT(?nodename,?propname,?name)),?subproperty) AS ?iri)
    {
      ?subproperty sh:datatype ?type .
    }
    UNION
    {
      ?subproperty sh:in/(rdf:rest*/rdf:first)? ?range .
    }
    UNION
    {
      ?subproperty sh:class ?dataclass .
      OPTIONAL {
        ?subproperty twa:dependentOn ?dependentShape .
      }
    }

    # Retrieve VALUE constraints to be assigned to group if available
    OPTIONAL {
      ?property sh:minCount ?mingcount .
    }
    OPTIONAL {
      ?property sh:maxCount ?maxgcount .
    }

    # Retrieve group directly if available
    OPTIONAL {
      ?subproperty sh:group ?groupobj .
      ?groupobj rdfs:label ?group;
      sh:description ?groupdesc.      
      OPTIONAL{
        ?groupobj sh:order ?grouporder.
      }
      OPTIONAL {
        ?groupobj twa:role ?grouprole .
      }
      OPTIONAL {
        ?groupobj sh:minCount ?mingroupcount ;
          sh:maxCount ?maxgroupcount .
      }
    }
    # Else, populate group from the target of sh:node
    BIND (IF(BOUND(?group), ?group, IF(?property != ?subproperty, ?propname, ?null)) AS ?group)
    BIND (IF(BOUND(?groupdesc), ?groupdesc, IF(?property != ?subproperty, ?propdesc, ?null)) AS ?groupdesc)
    BIND (IF(BOUND(?groupobj), ?mingroupcount, IF(?property != ?subproperty, ?mingcount, ?null)) AS ?mingroupcount)
    BIND (IF(BOUND(?groupobj), ?maxgroupcount, IF(?property != ?subproperty, ?maxgcount, ?null)) AS ?maxgroupcount)
    BIND (IF(BOUND(?groupobj),
            IF(BOUND(?nodename),BNODE(CONCAT(?nodename,?group)),?groupobj),
            IF(?property != ?subproperty, 
              IF(BOUND(?nodename),BNODE(CONCAT(?nodename,?group)),BNODE(?group)),
              ?null)
          ) AS ?groupobj)

    OPTIONAL {
      ?property twa:role ?grouprole .
    }
    OPTIONAL {
      ?subproperty twa:role ?role .
    }
    OPTIONAL {
      ?property sh:order ?proporder .
      ?subproperty sh:order ?order .
      BIND (IF(?property != ?subproperty, ?proporder, 0) AS ?grouporder)
    }
    OPTIONAL {
      ?property sh:order ?order .
    }
    BIND (IF(BOUND(?order), ?order, 0) AS ?order)
    BIND (IF(BOUND(?grouporder), ?grouporder, 0) AS ?grouporder)

    OPTIONAL {
      ?subproperty sh:defaultValue ?defaultValue .
    }

    # Value constraints
    OPTIONAL {
      ?subproperty sh:minCount ?mincount .
    }
    OPTIONAL {
      ?subproperty sh:maxCount ?maxcount .
    }

    OPTIONAL {
      ?subproperty sh:minInclusive ?mininclusive .
    }
    OPTIONAL {
      ?subproperty sh:maxInclusive ?maxinclusive .
    }

    OPTIONAL {
      ?subproperty sh:minExclusive ?minexclusive .
    }
    OPTIONAL {
      ?subproperty sh:maxExclusive ?maxexclusive .
    }

    OPTIONAL {
      ?subproperty sh:minLength ?minlength .
    }
    OPTIONAL {
      ?subproperty sh:maxLength ?maxlength .
    }

    OPTIONAL {
      ?subproperty sh:pattern ?pattern .
    }

    OPTIONAL {
      ?subproperty twa:step ?step .
    }
  }
}